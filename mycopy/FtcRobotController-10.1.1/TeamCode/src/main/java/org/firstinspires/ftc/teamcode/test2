package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;

@TeleOp
public class Mecanum extends LinearOpMode {

    public DcMotor arm = null; // the arm motor
    public CRServo intake = null; // the active intake servo
    public Servo wrist = null; // servo for wrist
    public Servo claw = null; // claw servo

    @Override
    public void runOpMode() throws InterruptedException {

        // Declare motor and servo variables
        DcMotor frontLeftMotor = hardwareMap.dcMotor.get("frontLeftMotor");
        DcMotor backLeftMotor = hardwareMap.dcMotor.get("backLeftMotor");
        DcMotor frontRightMotor = hardwareMap.dcMotor.get("frontRightMotor");
        DcMotor backRightMotor = hardwareMap.dcMotor.get("backRightMotor");

        arm = hardwareMap.get(DcMotor.class, "arm");
        intake = hardwareMap.get(CRServo.class, "intake");
        claw = hardwareMap.get(Servo.class, "claw");
        wrist = hardwareMap.get(Servo.class, "wrist");

        // Motor configuration
        arm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        arm.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        frontLeftMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        backLeftMotor.setDirection(DcMotorSimple.Direction.REVERSE);

        waitForStart();

        if (isStopRequested()) return;

        double armHoldPower = 0;

        while (opModeIsActive()) {
            // Mecanum drive calculations
            double y = -gamepad1.left_stick_y; // Reversed
            double x = gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
            double rx = gamepad1.right_stick_x;

            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1) * 2;
            double frontLeftPower = (y + x + rx) / denominator;
            double backLeftPower = (y - x + rx) / denominator;
            double frontRightPower = (y - x - rx) / denominator;
            double backRightPower = (y + x - rx) / denominator;

            frontLeftMotor.setPower(frontLeftPower);
            backLeftMotor.setPower(backLeftPower);
            frontRightMotor.setPower(frontRightPower);
            backRightMotor.setPower(backRightPower);

            // Arm movement and locking
            if (gamepad1.dpad_up) {
                arm.setPower(0.75); // move arm up
                armHoldPower = 0.1; // maintain slight power to hold position
            } else if (gamepad1.dpad_down) {
                arm.setPower(-0.75); // move arm down
                armHoldPower = 0; // release power when going down
            } else {
                arm.setPower(armHoldPower); // hold position
            }

            // Wrist control for opening/closing
            if (gamepad1.square) {
                wrist.setPosition(0.8); // wrist open
            } else if (gamepad1.circle) {
                wrist.setPosition(0.2); // wrist close
            }

            // Claw control for grabbing/releasing
            if (gamepad1.left_bumper) {
                claw.setPosition(1); // claw open
            } else if (gamepad1.right_bumper) {
                claw.setPosition(0); // claw close
            }

            // continuous rotation servo for intake
            if (gamepad1.right_trigger > 0) {
                intake.setPower(1); // intake forward
            } else if (gamepad1.left_trigger > 0) {
                intake.setPower(-1); // intake reverse
            } else {
                intake.setPower(0); // stop intake
            }
        }
    }
}
